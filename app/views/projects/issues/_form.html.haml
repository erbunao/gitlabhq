%div.issue-form-holder
  %h3.page-title= @issue.new_record? ? "New Issue" : "Edit Issue ##{@issue.iid}"
  %hr
  - if @repository.exists? && !@repository.empty? && @repository.contribution_guide && !@issue.persisted?
    - contribution_guide_url = project_blob_path(@project, tree_join(@repository.root_ref, @repository.contribution_guide.name))
    .alert.alert-info.col-sm-10.col-sm-offset-2
      ="Please review the <strong>#{link_to "guidelines for contribution", contribution_guide_url}</strong> to this repository.".html_safe
  = form_for [@project, @issue], html: { class: 'form-horizontal issue-form' } do |f|
    -if @issue.errors.any?
      .alert.alert-danger
        - @issue.errors.full_messages.each do |msg|
          %span= msg
          %br
    .form-group
      = f.label :title, class: 'control-label' do
        %strong= 'Title *'
      .col-sm-10
        = f.text_field :title, maxlength: 255, class: "form-control js-gfm-input", autofocus: true, required: true
    .form-group
      = f.label :description, 'Description', class: 'control-label'
      .col-sm-10
        .demo#div-dropzone
          = f.text_area :description, class: 'form-control js-gfm-input', rows: 14
          #div-dropzone-hover 
            %i.icon-picture.div-dropzone-icon
          #div-dropzone-error 
            %i.icon-remove.div-dropzone-icon-error
            %div{style:'display:inline'}
              Unsupported File Type
          #div-dropzone-spinner 
            %i.icon-spinner.icon-spin.div-dropzone-icon
        %p.hint Issues are parsed with #{link_to "GitLab Flavored Markdown", help_markdown_path, target: '_blank'}.
    %hr
    .form-group
      .issue-assignee
        = f.label :assignee_id, class: 'control-label' do
          %i.icon-user
          Assign to
        .col-sm-10
          = project_users_select_tag('issue[assignee_id]', placeholder: 'Select a user', class: 'custom-form-control', selected: @issue.assignee_id)
          &nbsp;
          = link_to 'Assign to me', '#', class: 'btn btn-small assign-to-me-link'
    .form-group
      .issue-milestone
        = f.label :milestone_id, class: 'control-label' do
          %i.icon-time
          Milestone
        .col-sm-10= f.select(:milestone_id, milestone_options(@issue), { include_blank: "Select milestone" }, {class: 'select2'})

    .form-group
      = f.label :label_list, class: 'control-label' do
        %i.icon-tag
        Labels
      .col-sm-10
        = f.text_field :label_list, maxlength: 2000, class: "form-control"
        %p.hint Separate labels with commas.



    .form-actions
      - if @issue.new_record?
        = f.submit 'Submit new issue', class: "btn btn-create"
      -else
        = f.submit 'Save changes', class: "btn-save btn"

      - cancel_path = @issue.new_record? ? project_issues_path(@project) : project_issue_path(@project, @issue)
      = link_to "Cancel", cancel_path, class: 'btn btn-cancel'

:javascript
  $("#issue_label_list")
    .bind( "keydown", function( event ) {
      if ( event.keyCode === $.ui.keyCode.TAB &&
        $( this ).data( "autocomplete" ).menu.active ) {
        event.preventDefault();
      }
    })
    .bind("click", function(event) {
      $(this).autocomplete("search", "");
    })
    .autocomplete({
      minLength: 0,
      source: function( request, response ) {
        response( $.ui.autocomplete.filter(
          #{raw labels_autocomplete_source}, extractLast( request.term ) ) );
      },
      focus: function() {
        return false;
      },
      select: function(event, ui) {
        var terms = split( this.value );
        terms.pop();
        terms.push( ui.item.value );
        terms.push( "" );
        this.value = terms.join( ", " );
        return false;
      }
    });

  $('.assign-to-me-link').on('click', function(e){
    $('#issue_assignee_id').val("#{current_user.id}").trigger("change");
    e.preventDefault();
  });

  function formatLinks(links) {
    var md_links = [];
    links.forEach(function (str) {
      md_links.push('![Alt text]('+ str + ')');
    })
    return md_links;
  }

  $('#div-dropzone').dropzone({
    url: "#{upload_image_project_issues_path}",
    dictDefaultMessage: "",
    clickable: false,
    paramName: "issue-imgs",
    maxFilesize: 2,
    uploadMultiple: true,
    acceptedFiles: "image/jpg,image/jpeg,image/gif,image/png",
    headers: { "X-CSRF-Token": $('meta[name="csrf-token"]').attr('content')},
    
    success: function(header,response){
      $("#issue_description").val($("#issue_description").val() + formatLinks(response.links).join("\n") + "\n");
    },

    error: function(temp, errorMessage) {
      $('#div-dropzone-error').css('opacity', 0.7);
      $('#div-dropzone-error').delay(500).fadeTo("slow", 0);
    },

    sending: function() {
      $('#div-dropzone-spinner').css('opacity', 0.7);    
    },
    
    complete: function() {
      $('#div-dropzone-spinner').css('opacity',0);
    }
    });

  $('#div-dropzone').on('dragenter',function(){
    console.log($(this).children('textarea').attr('id'));
    $(this).children('textarea').focus();
    $('#div-dropzone-hover').css('opacity',0.7);
  });

  $('body').on('dragover',function(){
    $('#div-dropzone').children('textarea').blur();
    $('#div-dropzone-hover').css('opacity',0);
  });

  $('#div-dropzone').on('drop',function(){
    $('.dz-preview').remove();
    $('#div-dropzone-hover').css('opacity',0);
  });
